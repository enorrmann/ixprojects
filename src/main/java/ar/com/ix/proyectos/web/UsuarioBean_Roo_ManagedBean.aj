// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ar.com.ix.proyectos.web;

import ar.com.ix.proyectos.model.Usuario;
import ar.com.ix.proyectos.web.UsuarioBean;
import ar.com.ix.proyectos.web.util.MessageFactory;
import java.util.ArrayList;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import org.primefaces.component.inputtext.InputText;
import org.primefaces.component.message.Message;
import org.primefaces.component.outputlabel.OutputLabel;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;

privileged aspect UsuarioBean_Roo_ManagedBean {
    
    declare @type: UsuarioBean: @ManagedBean(name = "usuarioBean");
    
    declare @type: UsuarioBean: @SessionScoped;
    
    private String UsuarioBean.name = "Usuarios";
    
    private Usuario UsuarioBean.usuario;
    
    private List<Usuario> UsuarioBean.allUsuarios;
    
    private boolean UsuarioBean.dataVisible = false;
    
    private List<String> UsuarioBean.columns;
    
    private HtmlPanelGrid UsuarioBean.createPanelGrid;
    
    private HtmlPanelGrid UsuarioBean.editPanelGrid;
    
    private HtmlPanelGrid UsuarioBean.viewPanelGrid;
    
    private boolean UsuarioBean.createDialogVisible = false;
    
    @PostConstruct
    public void UsuarioBean.init() {
        columns = new ArrayList<String>();
        columns.add("nombre");
        columns.add("password");
        columns.add("rol");
    }
    
    public String UsuarioBean.getName() {
        return name;
    }
    
    public List<String> UsuarioBean.getColumns() {
        return columns;
    }
    
    public List<Usuario> UsuarioBean.getAllUsuarios() {
        return allUsuarios;
    }
    
    public void UsuarioBean.setAllUsuarios(List<Usuario> allUsuarios) {
        this.allUsuarios = allUsuarios;
    }
    
    public String UsuarioBean.findAllUsuarios() {
        allUsuarios = Usuario.findAllUsuarios();
        dataVisible = !allUsuarios.isEmpty();
        return null;
    }
    
    public boolean UsuarioBean.isDataVisible() {
        return dataVisible;
    }
    
    public void UsuarioBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid UsuarioBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void UsuarioBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid UsuarioBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void UsuarioBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid UsuarioBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void UsuarioBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid UsuarioBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel nombreCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        nombreCreateOutput.setFor("nombreCreateInput");
        nombreCreateOutput.setId("nombreCreateOutput");
        nombreCreateOutput.setValue("Nombre:");
        htmlPanelGrid.getChildren().add(nombreCreateOutput);
        
        InputText nombreCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        nombreCreateInput.setId("nombreCreateInput");
        nombreCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{usuarioBean.usuario.nombre}", String.class));
        nombreCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(nombreCreateInput);
        
        Message nombreCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nombreCreateInputMessage.setId("nombreCreateInputMessage");
        nombreCreateInputMessage.setFor("nombreCreateInput");
        nombreCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nombreCreateInputMessage);
        
        OutputLabel passwordCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        passwordCreateOutput.setFor("passwordCreateInput");
        passwordCreateOutput.setId("passwordCreateOutput");
        passwordCreateOutput.setValue("Password:");
        htmlPanelGrid.getChildren().add(passwordCreateOutput);
        
        InputText passwordCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        passwordCreateInput.setId("passwordCreateInput");
        passwordCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{usuarioBean.usuario.password}", String.class));
        passwordCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(passwordCreateInput);
        
        Message passwordCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        passwordCreateInputMessage.setId("passwordCreateInputMessage");
        passwordCreateInputMessage.setFor("passwordCreateInput");
        passwordCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(passwordCreateInputMessage);
        
        OutputLabel rolCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        rolCreateOutput.setFor("rolCreateInput");
        rolCreateOutput.setId("rolCreateOutput");
        rolCreateOutput.setValue("Rol:");
        htmlPanelGrid.getChildren().add(rolCreateOutput);
        
        InputText rolCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        rolCreateInput.setId("rolCreateInput");
        rolCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{usuarioBean.usuario.rol}", String.class));
        rolCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(rolCreateInput);
        
        Message rolCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        rolCreateInputMessage.setId("rolCreateInputMessage");
        rolCreateInputMessage.setFor("rolCreateInput");
        rolCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(rolCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid UsuarioBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel nombreEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        nombreEditOutput.setFor("nombreEditInput");
        nombreEditOutput.setId("nombreEditOutput");
        nombreEditOutput.setValue("Nombre:");
        htmlPanelGrid.getChildren().add(nombreEditOutput);
        
        InputText nombreEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        nombreEditInput.setId("nombreEditInput");
        nombreEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{usuarioBean.usuario.nombre}", String.class));
        nombreEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(nombreEditInput);
        
        Message nombreEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nombreEditInputMessage.setId("nombreEditInputMessage");
        nombreEditInputMessage.setFor("nombreEditInput");
        nombreEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nombreEditInputMessage);
        
        OutputLabel passwordEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        passwordEditOutput.setFor("passwordEditInput");
        passwordEditOutput.setId("passwordEditOutput");
        passwordEditOutput.setValue("Password:");
        htmlPanelGrid.getChildren().add(passwordEditOutput);
        
        InputText passwordEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        passwordEditInput.setId("passwordEditInput");
        passwordEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{usuarioBean.usuario.password}", String.class));
        passwordEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(passwordEditInput);
        
        Message passwordEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        passwordEditInputMessage.setId("passwordEditInputMessage");
        passwordEditInputMessage.setFor("passwordEditInput");
        passwordEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(passwordEditInputMessage);
        
        OutputLabel rolEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        rolEditOutput.setFor("rolEditInput");
        rolEditOutput.setId("rolEditOutput");
        rolEditOutput.setValue("Rol:");
        htmlPanelGrid.getChildren().add(rolEditOutput);
        
        InputText rolEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        rolEditInput.setId("rolEditInput");
        rolEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{usuarioBean.usuario.rol}", String.class));
        rolEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(rolEditInput);
        
        Message rolEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        rolEditInputMessage.setId("rolEditInputMessage");
        rolEditInputMessage.setFor("rolEditInput");
        rolEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(rolEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid UsuarioBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText nombreLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nombreLabel.setId("nombreLabel");
        nombreLabel.setValue("Nombre:");
        htmlPanelGrid.getChildren().add(nombreLabel);
        
        HtmlOutputText nombreValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nombreValue.setId("nombreValue");
        nombreValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{usuarioBean.usuario.nombre}", String.class));
        htmlPanelGrid.getChildren().add(nombreValue);
        
        HtmlOutputText passwordLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        passwordLabel.setId("passwordLabel");
        passwordLabel.setValue("Password:");
        htmlPanelGrid.getChildren().add(passwordLabel);
        
        HtmlOutputText passwordValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        passwordValue.setId("passwordValue");
        passwordValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{usuarioBean.usuario.password}", String.class));
        htmlPanelGrid.getChildren().add(passwordValue);
        
        HtmlOutputText rolLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        rolLabel.setId("rolLabel");
        rolLabel.setValue("Rol:");
        htmlPanelGrid.getChildren().add(rolLabel);
        
        HtmlOutputText rolValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        rolValue.setId("rolValue");
        rolValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{usuarioBean.usuario.rol}", String.class));
        htmlPanelGrid.getChildren().add(rolValue);
        
        return htmlPanelGrid;
    }
    
    public Usuario UsuarioBean.getUsuario() {
        if (usuario == null) {
            usuario = new Usuario();
        }
        return usuario;
    }
    
    public void UsuarioBean.setUsuario(Usuario usuario) {
        this.usuario = usuario;
    }
    
    public String UsuarioBean.onEdit() {
        return null;
    }
    
    public boolean UsuarioBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void UsuarioBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String UsuarioBean.displayList() {
        createDialogVisible = false;
        findAllUsuarios();
        return "usuario";
    }
    
    public String UsuarioBean.displayCreateDialog() {
        usuario = new Usuario();
        createDialogVisible = true;
        return "usuario";
    }
    
    public String UsuarioBean.persist() {
        String message = "";
        if (usuario.getId() != null) {
            usuario.merge();
            message = "message_successfully_updated";
        } else {
            usuario.persist();
            message = "message_successfully_created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialogWidget.hide()");
        context.execute("editDialogWidget.hide()");
        
        FacesMessage facesMessage = MessageFactory.getMessage(message, "Usuario");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllUsuarios();
    }
    
    public String UsuarioBean.delete() {
        usuario.remove();
        FacesMessage facesMessage = MessageFactory.getMessage("message_successfully_deleted", "Usuario");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllUsuarios();
    }
    
    public void UsuarioBean.reset() {
        usuario = null;
        createDialogVisible = false;
    }
    
    public void UsuarioBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
